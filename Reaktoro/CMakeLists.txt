# Recursively collect all header files from the current directory
file(GLOB_RECURSE HPP_FILES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *.hpp *.hxx)

# Recursively collect all source files from the current directory
file(GLOB_RECURSE CPP_FILES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *.cpp)

# Recursively collect all test files from the current directory
file(GLOB_RECURSE TEST_CXX_FILES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *.test.cxx)

# Set the list of names of the third-party targets and libraries
set(THIRDPARTY_TARGETS PUGIXML MINIZ CVODE PHREEQC GEMS)
set(THIRDPARTY_LIBS pugixml miniz sundials_cvode sundials_nvecserial phreeqc gems)

# Enable automatic creation of a module definition (.def) file for a SHARED library on Windows.
set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS TRUE)

# Add the library path of the external dependencies to link directories
# Note: cmake v3.13 is needed to use target_link_directories command!
link_directories(${REAKTORO_THIRDPARTY_LIBRARY_PATH})

# Create a library target for Reaktoro
add_library(Reaktoro ${HPP_FILES} ${CPP_FILES})

# Add an alias Reaktoro::Reaktoro to the target library Reaktoro
add_library(Reaktoro::Reaktoro ALIAS Reaktoro)

# Specify the external dependencies of Reaktoro to ensure proper build sequence
add_dependencies(Reaktoro Reaktoro::Databases ${THIRDPARTY_TARGETS})

# Add the include paths to Reaktoro library target
target_include_directories(Reaktoro
    PUBLIC
        $<BUILD_INTERFACE:${PROJECT_SOURCE_DIR}>
        $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/deps/eigen3>
        $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
        $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}/Reaktoro/deps/eigen3>
    PRIVATE ${REAKTORO_THIRDPARTY_INCLUDE_PATH})

# Link Reaktoro library against external dependencies
target_link_libraries(Reaktoro
    PRIVATE ${THIRDPARTY_LIBS}
    PRIVATE Reaktoro::Databases
    PUBLIC autodiff::autodiff
    PUBLIC Optima::Optima
)

# Link Reaktoro library against ThermoFun if found
if(ThermoFun_FOUND)
    target_link_libraries(Reaktoro PUBLIC ThermoFun::ThermoFun)
endif()

# Set compilation features to be propagated to dependent codes.
target_compile_features(Reaktoro PUBLIC cxx_std_17)

# Set some target properties
set_target_properties(Reaktoro PROPERTIES
    POSITION_INDEPENDENT_CODE ON
    CXX_EXTENSIONS OFF)

# Create a test executable target for Reaktoro
add_executable(tests ${TEST_CXX_FILES})
target_link_libraries(tests Reaktoro)
target_include_directories(tests PUBLIC ${PROJECT_SOURCE_DIR})

#==============================================================================
#
# PYTHON BINDINGS COMPILATION CONFIGURATION
#
#==============================================================================

if(REAKTORO_BUILD_PYTHON)

    # Include the Eigen include path for pybind11
    include_directories(${PROJECT_SOURCE_DIR}/Reaktoro/deps/eigen3)

    # Ensure pybind11 uses C++17 standard
    set(PYBIND11_CPP_STANDARD -std=c++17)

    # Find pybind11, needed to compile the python bindings
    find_package(pybind11 REQUIRED)

    # Recursively collect all python binding files from the current directory
    file(GLOB_RECURSE PY_CXX_FILES RELATIVE ${CMAKE_CURRENT_SOURCE_DIR} *.py.cxx)

    # Compile Reaktoro *.py.cxx files into a Python module
    pybind11_add_module(reaktoro4py ${PY_CXX_FILES})

    # Create an install target for the python module
    install(TARGETS reaktoro4py DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT libraries)

    # Add the root directory of the project to the include list
    target_include_directories(reaktoro4py PRIVATE ${PROJECT_SOURCE_DIR})

    # Link reaktoro4py against Reaktoro C++ library
    target_link_libraries(reaktoro4py LINK_PRIVATE Reaktoro::Reaktoro)

    # This is needed to avoid compilation issues when using clang-9 and c++17
    if(${CMAKE_CXX_COMPILER_ID} STREQUAL Clang AND ${CMAKE_CXX_COMPILER_VERSION} VERSION_LESS 10.0.0)
        target_compile_options(optima PRIVATE -fsized-deallocation)
    endif()

endif()

#==============================================================================
#
# INSTALL CONFIGURATION
#
#==============================================================================

# Install Reaktoro C++ library
install(TARGETS Reaktoro
    EXPORT ReaktoroTargets
    ARCHIVE DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT libraries
    LIBRARY DESTINATION ${CMAKE_INSTALL_LIBDIR} COMPONENT libraries
    RUNTIME DESTINATION ${CMAKE_INSTALL_BINDIR} COMPONENT libraries)

# Install Reaktoro header files
install(DIRECTORY ${PROJECT_SOURCE_DIR}/Reaktoro
    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} COMPONENT headers
    FILES_MATCHING PATTERN "*.hpp" PATTERN "*.hxx")

# Install deps header files
install(DIRECTORY ${PROJECT_SOURCE_DIR}/Reaktoro/deps
    DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/Reaktoro COMPONENT headers)
